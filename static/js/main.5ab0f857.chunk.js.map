{"version":3,"sources":["Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","todoObj","index","onChange","removeTodo","classes","completed","push","className","type","checked","id","join","title","onClick","bind","TodoList","arrTodos","map","key","AddTodo","onCreate","useState","addValue","setAddValue","onSubmit","e","preventDefault","trim","placeholder","value","target","App","todoData","setTodoData","useEffect","concat","length","obj","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sJA6BeA,EA3BE,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAEnCC,EAAU,GAKhB,OAHGJ,EAAQK,WACPD,EAAQE,KAAK,QAGb,4BACI,yBAAKC,UAAU,QACX,+BACI,2BAAOC,KAAK,WACRC,QAAST,EAAQK,UACjBH,SAAU,WAAKA,EAASF,EAAQU,OACpC,yBAAKH,UAAU,oBACf,gCAASN,GACT,uBAAGM,UAAWH,EAAQO,KAAK,MAAOX,EAAQY,QAE9C,4BACIL,UAAU,YACVM,QAASV,EAAWW,KAAK,KAAMd,EAAQU,KAF3C,WCCDK,EAlBE,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,SAAUd,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WACnC,OACI,4BAEQa,EAASC,KAAI,SAACjB,EAAQC,GAAT,OACT,kBAAC,EAAD,CACIiB,IAAKlB,EAAQU,GACbV,QAASA,EACTC,MAAOA,EAAM,EACbC,SAAUA,EACVC,WAAYA,SCiBrBgB,EA5BC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEIC,mBAAS,IAFb,mBAErBC,EAFqB,KAEXC,EAFW,KAa5B,OACI,0BAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAECJ,EAASK,SACRP,EAASE,GACTC,EAAY,OAMZ,2BACIf,KAAK,OACLoB,YAAY,wFACZC,MAAOP,EACPpB,SAAU,SAAAuB,GAAC,OAAEF,EAAYE,EAAEK,OAAOD,UAEtC,4BACIrB,KAAK,UADT,sDCyCGuB,MA5Df,WAAgB,IAAD,EAEkBV,mBAAS,IAF3B,mBAEPW,EAFO,KAEGC,EAFH,KA4Cd,OAlBAC,qBAAU,WAOTD,EACC,CACC,CAAEvB,GAAG,EAAGL,WAAU,EAAOO,MAAM,uBAC/B,CAAEF,GAAG,EAAGL,WAAU,EAAOO,MAAM,YAC/B,CAAEF,GAAG,EAAGL,WAAU,EAAMO,MAAM,kBAC9B,CAAEF,GAAG,EAAGL,WAAU,EAAOO,MAAM,eAC/B,CAAEF,GAAG,EAAGL,WAAU,EAAMO,MAAM,mBAG9B,IAGF,yBAAKL,UAAU,OACd,oCACA,kBAAC,EAAD,CAASa,SA7BK,SAACR,EAAOF,GACvBuB,EAAYD,EAASG,OAAO,CAAC,CAC5BvB,QACAP,WAAW,EACXK,GAAIsB,EAASI,OAAQJ,EAASA,EAASI,OAAO,GAAG1B,GAAK,EAAI,SA0BzDsB,EAASI,OACR,kBAAC,EAAD,CACApB,SAAUgB,EACV9B,SA/Ca,SAAAQ,GAChBuB,EACCD,EAASf,KAAI,SAAAoB,GAGZ,OAFGA,EAAI3B,KAAOA,IACb2B,EAAIhC,WAAagC,EAAIhC,WACfgC,OA2CNlC,WAtCe,SAAAO,GAClBuB,EAAYD,EAASM,QAAO,SAAAtC,GAAO,OAAEA,EAAQU,KAAOA,SAuCjD,uBAAGH,UAAU,YAAb,cC9CegC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5ab0f857.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TodoItem = ({todoObj, index, onChange, removeTodo}) => {\r\n\r\n    const classes = []\r\n\r\n    if(todoObj.completed)\r\n        classes.push('done')\r\n\r\n    return (\r\n        <li>\r\n            <div className=\"item\">\r\n                <label>\r\n                    <input type=\"checkbox\" \r\n                        checked={todoObj.completed}\r\n                        onChange={()=>{onChange(todoObj.id)}}/>\r\n                    <div className=\"custom-checkbox\"></div>\r\n                    <strong>{index}</strong>\r\n                    <p className={classes.join(' ')}>{todoObj.title}</p>\r\n                </label>\r\n                <button \r\n                    className=\"close-btn\"\r\n                    onClick={removeTodo.bind(null, todoObj.id)}\r\n                    >&times;</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nconst TodoList = ({arrTodos, onChange, removeTodo}) => {\r\n    return (\r\n        <ul>\r\n            {\r\n                arrTodos.map((todoObj,index)=>\r\n                    <TodoItem \r\n                        key={todoObj.id} \r\n                        todoObj={todoObj} \r\n                        index={index+1}\r\n                        onChange={onChange}\r\n                        removeTodo={removeTodo}\r\n                    />\r\n                )\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useState} from 'react'\r\n\r\nconst AddTodo = ({onCreate}) => {\r\n\r\n    const [addValue, setAddValue] = useState('')\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if(addValue.trim()){\r\n            onCreate(addValue)\r\n            setAddValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Добавить задачу\"\r\n                value={addValue}\r\n                onChange={e=>setAddValue(e.target.value)}\r\n                />\r\n            <button \r\n                type=\"submit\"\r\n                >ДОБАВИТЬ</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo","import React, { useState, useEffect } from 'react'\nimport TodoList from './Todo/TodoList'\nimport AddTodo from './Todo/AddTodo'\n\nfunction App() {\n\n\tconst [todoData, setTodoData] = useState([])\n\n\tconst onChange = id => {\n\t\tsetTodoData(\n\t\t\ttodoData.map(obj=>{\n\t\t\t\tif(obj.id === id)\n\t\t\t\t\tobj.completed = !obj.completed\t\n\t\t\t\treturn obj\n\t\t\t})\n\t\t)\n\t}\n\n\tconst removeTodo = id => {\n\t\tsetTodoData(todoData.filter(todoObj=>todoObj.id !== id))\n\t}\n\n\tconst addTodo = (title, id) => {\n\t\tsetTodoData(todoData.concat([{\n\t\t\ttitle,\n\t\t\tcompleted: false,\n\t\t\tid: todoData.length? todoData[todoData.length-1].id + 1 : 1\n\t\t}]))\n\t}\n\n\tuseEffect(()=>{\n\t\t// (async ()=>{\n\t\t// \tconst response = await fetch(`https://reqres.in/api/users?page=2`)\n\t\t// \tconst data = await response.json()\n\t\t// \tconsole.log(data.data)\n\t\t// \tsetTodoData(data.data)\n\t\t// })();\n\t\tsetTodoData(\n\t\t\t[\n\t\t\t\t{ id:1, completed:false, title:\"Buy some vegetables\" },\n\t\t\t\t{ id:2, completed:false, title:\"Do sport\" },\n\t\t\t\t{ id:3, completed:true, title:\"Wake up at 7am\" },\n\t\t\t\t{ id:4, completed:false, title:\"Learn React\" },\n\t\t\t\t{ id:5, completed:true, title:\"Read a book\" }\n\t\t\t]\n\t\t)\t\n\t}, [])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Todo</h1>\n\t\t\t<AddTodo onCreate={addTodo}/>\n\t\t\t{todoData.length?\n\t\t\t\t(<TodoList \n\t\t\t\t\tarrTodos={todoData} \n\t\t\t\t\tonChange={onChange} \n\t\t\t\t\tremoveTodo={removeTodo}/>)\n\t\t\t:\n\t\t\t\t(<p className=\"no-todos\">No todos</p>)\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}